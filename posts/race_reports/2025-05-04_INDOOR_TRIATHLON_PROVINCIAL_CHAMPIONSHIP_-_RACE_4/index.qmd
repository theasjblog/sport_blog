---
title: "Indoor Triathlon Provincial Championship Series - Race 4 And Series Recap"
date: "2025-05-04"
author: "Adrian Joseph"
image: https://storage.googleapis.com/blogs_josa/sport_small/2025-02-22_INDOOR_TRIATHLON_SERIES_RACE_1/img/00.png
categories: [race report, triathlon, indoor]
format: html
lightbox:
  match: auto
  effect: fade
  desc-position: right
  loop: false
---

![](https://storage.googleapis.com/blogs_josa/sport_small/2025-02-22_INDOOR_TRIATHLON_SERIES_RACE_1/img/00.png)

# Overview

This was the third race in the Ontario Indoor Triathlon Championship series. If you're not familiar with the format, I talked about it more in [this post](../2025-02-22_INDOOR_TRIATHLON_PROVINCIAL_CHAMPIONSHIP_-_RACE_1/index.qmd) and [this one](../2025-04-12_INDOOR_TRIATHLON_PROVINCIAL_CHAMPIONSHIP_-_RACE_3/index.qmd).

## Quick Recap of the Format

In this series, your score is based on how far you can swim, bike, and run in 15 minutes each. The further you go, the more points you earn. The series includes four races, but only your best three results count toward the final standings. Whoever has the highest point total at the end wins the championship (and gets a pretty cool trophy). Age Group athletes can also earn bragging rights—and a digital certificate—if they top their 10-year age group.

## My Goals Going In

Heading into this event, I had two main goals:

* Hold on to my age group lead.
* Do better (or at least not worse) than the previous race.

I wasn’t aiming for the overall title—let’s be real, at 40+ years old, it’s tough to compete with 20-somethings in a sprint-style event like this.

## Age group ranking

Did I manage to keep my age group lead? Yep—and it didn’t take much effort. I was the only one in my age group!

So yes, the competitive spirit wasn’t exactly raging in M40–49, but it did guarantee me the win in the Age Group category for the series. Here are the winner of this last race in each Age Group:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(arrow)
library(dplyr)
library(kableExtra)

all_races <- arrow::read_parquet('https://storage.googleapis.com/blogs_josa/sport/parquets/all_results.parquet') |>
  filter(event_date %in% c('2025-04-12', '2025-05-04', '2025-02-22'))

leaders <- all_races |>
  filter(event_date  == '2025-05-04') |>
  arrange(desc(result_final)) |>
  mutate(overall_ranking = seq(1, sum(all_races$event_date == '2025-05-04'))) |>
  group_by(category) |>
  arrange(desc(result_final)) |>
  slice_head(n=1) |>
  ungroup() |>
  select(all_of(c(
    'names', 'category', 'result_final', 'overall_ranking'
  ))) |>
  rename(
    'Name' = 'names',
    'Age Group' = 'category',
    'Total Points' = 'result_final',
    'Overall Ranking' = 'overall_ranking'
  )

kableExtra::kable(leaders) |>
  row_spec(which(leaders$Name == "ADRIAN JOSEPH"), bold = TRUE)

```

Since this is a series, the people who race at least three times are more likely to win overall—it’s a numbers game. In my case, I was the only M40–49 athlete to race in three or more events. That said, I like to compare my placement across each race to see how close I am to the top of my age group.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
segments <- all_races |>
  filter(category == unique(category[names == "ADRIAN JOSEPH"])) |>
  group_by(event_date) |>
  arrange(desc(result_sport_1)) |>
  mutate(ag_ranking_swim = seq(1, n())) |>
  arrange(desc(result_sport_2)) |>
  mutate(ag_ranking_bike = seq(1, n())) |>
  arrange(desc(result_sport_3)) |>
  mutate(ag_ranking_run = seq(1, n())) |>
  arrange(desc(result_final)) |>
  mutate(ag_ranking = seq(1, n())) |>
  ungroup() |>
  filter(names == 'ADRIAN JOSEPH') |>
  arrange(event_date) |>
  mutate(event_date = c(1, 3, 4)) |>
  select(all_of(c(
    'event_date', 'ag_ranking_swim', 'ag_ranking_bike', 'ag_ranking_run', 'ag_ranking'
  ))) |>
  rename(
    'Race [#]' = 'event_date',
    'Swim Ranking' = 'ag_ranking_swim',
    'Bike Ranking' = 'ag_ranking_bike',
    'Run Ranking' = 'ag_ranking_run',
    'Final Ranking' = 'ag_ranking'
  )

kableExtra::kable(segments)


```

As expected, my bike suffers on the first race because I started a couple of minutes late, and my swim on Race 3 was not great. Regardless, I was always up there, so at least I can tell myself that I did not win the Series only because I was the only one doing three races. I was always up there.


## Races comparison

### Swim

Let’s start with the swim. One change in Race 4: it was held in a 25-meter pool instead of a 50-meter one, which usually leads to faster times.

I consistently messed up the swim recording, so I do not have many metrics to go by, except the final number of points:


```{r, echo=FALSE, warning=FALSE, message=FALSE}

all_races <- arrow::read_parquet('https://storage.googleapis.com/blogs_josa/sport/parquets/record/2025-02-22.parquet') |>
  dplyr::bind_rows(arrow::read_parquet('https://storage.googleapis.com/blogs_josa/sport/parquets/record/2025-04-12.parquet')) |>
  dplyr::bind_rows(arrow::read_parquet('https://storage.googleapis.com/blogs_josa/sport/parquets/record/2025-05-04.parquet'))


swim_summary <- all_races |>
  filter(sport == 'swim') |>
  mutate(distance = ifelse(as.Date(timestamp) == as.Date('2025-02-22'), distance * 2, distance),
         event_date = as.Date(timestamp)) |>
  group_by(event_date) |>
  summarise(distance = max(distance, na.rm = TRUE)) |>
  ungroup() |>
  arrange(event_date) |>
  mutate(event_date = c(1,3,4)) |>
  rename(
    'Race [#]' = 'event_date',
    'Distance [m]' = 'distance'
    )

kableExtra::kable(swim_summary)

```


So never a particularly fast swim, but fairly consistent between the three events.


### Bike

Not much to report here either. I didn’t have sensors connected to my watch, so all I have are the official distances:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
official_records <- data.frame(
  race_n = c(1,3,4),
  bike_distance = c(9.0, 10.6, 10.6)
) |>
  rename(
    'Race [#]' = 'race_n',
    'Distane [km]' = 'bike_distance'
    )

kable(official_records)
```

Race 1 was a bit of a mess—I didn’t realize the race had started and lost a couple of minutes. The good news: the bike effort felt easier each time.

### Run

Here finally we have some metrics to look at. When I race, I always like the feeling of "finishing strong", and having a second half faster than the first half (negative split). Let's see if I achieved that:

```{r, echo=FALSE, message=FALSE, warning=FALSE}
all_runs <- all_races |>
  filter(sport == 'run') |>
  group_by(as.Date(timestamp)) |>
  arrange(timestamp) |>
  mutate(elapsed_time = as.numeric((timestamp - min(timestamp))/60)) |>
  ungroup()

convert_to_pace <- function(decimal_time){
  minutes <- floor(decimal_time)
  seconds <- round((decimal_time - minutes)*60)
  
  sprintf("%d:%02d", minutes, seconds)
}

summary_runs <- all_runs |>
  mutate(pace_run = 1000/(60*speed),
         event_date = as.Date(timestamp)) |>
  group_by(event_date) |>
  arrange(timestamp) |>
  summarise(tot_distance = round(max(distance)/1000, 2),
            avg_pace = mean(pace_run),
            pace_var = round(100* (mean(pace_run[floor(n()/2)+1:n()], na.rm = TRUE) - mean(pace_run[1:floor(n()/2)])) / avg_pace, 2),
            avg_power = round(mean(Power, na.rm = TRUE), 2),
            power_var = round(100* (mean(Power[floor(n()/2)+1:n()], na.rm = TRUE) - mean(Power[1:floor(n()/2)])) / avg_power, 2),
            avg_cadence = round(mean(cadence, na.rm = TRUE), 2),
            cadence_var = round(100* (mean(cadence[floor(n()/2)+1:n()], na.rm = TRUE) - mean(cadence[1:floor(n()/2)])) / avg_cadence, 2),
            avg_hr = round(mean(heart_rate, na.rm = TRUE), 2),
            hr_var = round(100* (mean(heart_rate[floor(n()/2)+1:n()], na.rm = TRUE) - mean(heart_rate[1:floor(n()/2)])) / avg_hr, 2)
            ) |>
  mutate(avg_pace = convert_to_pace(avg_pace)) |>
  ungroup() |>
  arrange(event_date) |>
  mutate(event_date = as.character(c(1,3,4))) |>
  rename(
    'Race [#]' = 'event_date',
    'Distance [Km]' = 'tot_distance',
    'Pace [min/Km]' = 'avg_pace',
    'Pace Variation [%]' = 'pace_var',
    'Power [W]' = 'avg_power',
    'Power Variation [%]' = 'power_var',
    'Cadence [spm]' = 'avg_cadence',
    'Cadence Variation [%]' = 'cadence_var',
    'Heart rate [bpm]' = 'avg_hr',
    'Heart rate Vartiation [%]' = 'hr_var'
  )

num_cols <- c('Pace Variation [%]', 'Power Variation [%]',
              'Cadence Variation [%]', 'Heart rate Vartiation [%]')

summary_runs <- summary_runs |>
  mutate(across(all_of(num_cols), ~ cell_spec(.x, 
                                              color = ifelse(as.numeric(.x) < 0, "green", "red")))) |>
  mutate(across(!all_of(num_cols), ~ cell_spec(.x, color = "black")))

summary_runs |>
kableExtra::kable('html',  escape = FALSE) |>
  kable_styling()
```

The cells in green are areas where I managed to hit a negative split, the ones in red are cells with a positive split.

I’m pretty happy with the progression. While I’m still not quite at the speed I’d like, things are trending in the right direction. Power is up, cadence is up, and I managed to keep an even or negative split.

Race 1 was a bit of a head-scratcher—I couldn’t raise my heart rate or generate much speed. I suspect I went too hard on the bike trying to make up for the late start.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(ggplot2)

summary_runs_plot <- all_runs |>
  mutate(Pace = 1000/(60*speed),
         event_date = as.character(as.Date(timestamp))) |>
  select(all_of(c(
    'event_date',
    'Power',
    'cadence',
    'heart_rate',
    'elapsed_time',
    'Pace'
  ))) |>
  tidyr::pivot_longer(
    cols = c(Power, cadence, heart_rate, Pace),
    values_to = 'value'
  )

ggplot(summary_runs_plot) +
  aes(x = elapsed_time, y = value, colour = event_date) +
  geom_line(alpha = 0.5) +
  geom_smooth(method = "loess", span = 0.1, se = FALSE) +
  scale_color_hue(direction = 1) +
  labs(
    x = "Elapsed time [min]",
    y = "",
    title = "Run metrics for the three races"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20L,
                              face = "bold"),
    axis.title.x = element_text(size = 15L,
                                face = "bold"),
    axis.text.y = element_text(size = 15L),
    axis.text.x = element_text(size = 15L),
    legend.text = element_text(size = 15L),
    legend.title = element_text(face = "bold",
                                size = 15L)
  ) +
  facet_wrap(vars(name), scales = 'free_y')
```

### Official results

The distances above are from my Garmin and Stryd power meter, which are great for comparisons—but not always accurate compared to the official results. For example, running in the outside lane to pass others adds distance that isn’t captured in the official numbers.

Here’s the official breakdown:

```{r, echo=FALSE, message=FALSE, warning=FALSE}
official_records <- data.frame(
  race_n = as.character(c(1,3,4)),
  swim_distance = c(825, 775, 887),
  swim_points = c(330, 310, 355),
  bike_distance = c(9.0, 10.6, 10.6),
  bike_points = c(450, 530, 530),
  run_distance = c(3.0, 3.3, 3.4),
  run_points = c(375, 413, 425),
  total_points = c(1150, 1253, 1310)
) |>
  rename(
    'Race [#]' = 'race_n',
    'Swim [m]' = 'swim_distance',
    'Swim Points' = 'swim_points',
    'Bike [Km]' = 'bike_distance',
    'Bike Points' = 'bike_points',
    'Run [Km]' = 'run_distance',
    'Run Points' = 'run_points',
    'Total Points' = 'total_points'
        )

kable(official_records)
```

# Final Thoughts

All in all, I’m happy with how things went. There’s clear improvement across the board, and more importantly, I felt stronger each time out. That’s a good sign as I head into the outdoor season. Let’s see what the next phase brings!


```{r, echo=FALSE, warning=FALSE, message=FALSE}
race_date <- "2025-05-04"

source('../../../inst/aux_functions.R')

DT::datatable(get_summary_data(arrow::read_parquet('https://storage.googleapis.com/blogs_josa/sport/parquets/main_dataset.parquet') |>
  filter(as.character(event_date) == race_date)),
              rownames = FALSE,
              filter = 'top',
              selection = 'single',
              escape = FALSE,
              options = list(
                paging =TRUE,
                pageLength =  10
              ))
```



::: {layout-ncol=4}

:::

