---
title: "Indoor Triathlon Provincial Championship Series - Race 4 And Series Recap"
date: "2025-05-04"
author: "Adrian Joseph"
image: https://storage.googleapis.com/blogs_josa/sport_small/2025-02-22_INDOOR_TRIATHLON_SERIES_RACE_1/img/00.png
categories: [race report, triathlon, indoor]
format: html
lightbox:
  match: auto
  effect: fade
  desc-position: right
  loop: false
---

![](https://storage.googleapis.com/blogs_josa/sport_small/2025-02-22_INDOOR_TRIATHLON_SERIES_RACE_1/img/00.png)

# Overview

This was the third race in the Ontario Indoor Triathlon Championship series. If you're not familiar with the format, I talked about it more in [this post](../2025-02-22_INDOOR_TRIATHLON_SERIES_RACE_1/index.qmd) and [this one](../2025-04-12_INDOOR_TRIATHLON_SERIES_RACE_3/index.qmd).

## Quick Recap of the Format

In this series, your score is based on how far you can swim, bike, and run in 15 minutes each. The further you go, the more points you earn. The series includes four races, but only your best three results count toward the final standings. Whoever has the highest point total at the end wins the championship (and gets a pretty cool trophy). Age Group athletes can also earn bragging rights—and a digital certificate—if they top their 10-year age group.

## My Goals Going In

Heading into this event, I had two main goals:

* Hold on to my age group lead.
* Do better (or at least not worse) than the previous race.

I wasn’t aiming for the overall title—let’s be real, at 40+ years old, it’s tough to compete with 20-somethings in a sprint-style event like this.

## Age group ranking

Did I manage to keep my age group lead? Yep—and it didn’t take much effort. I was the only one in my age group!

So yes, the competitive spirit wasn’t exactly raging in M40–49, but it did guarantee me the win in the Age Group category for the series. Here’s how the final series rankings looked:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(readr)
library(dplyr)
library(kableExtra)

r_1_m_path <- file.path('data', "men_ranking_1.csv")
r_2_m_path <- file.path('data', "men_ranking_2.csv")
r_4_m_path <- file.path('data', "men_ranking_4.csv")
races_raw <- read_csv(r_1_m_path, show_col_types = FALSE) |>
  mutate(
    `Age Group` = ifelse(`Age Group` == 'Under 19',
                         'M19<',
                         paste0('M', `Age Group`)),
    race_n = 1
  ) |>
  bind_rows(read_csv(r_2_m_path, show_col_types = FALSE) |>
              mutate(
                `Age Group` = ifelse(`Age Group` == 'Under 19',
                                     'M19<',
                                     paste0('M', `Age Group`)),
                race_n = 3
              ))  |>
  bind_rows(read_csv(r_4_m_path, show_col_types = FALSE) |>
              mutate(
                `Age Group` = ifelse(`Age Group` == 'Under 19',
                                     'M19<',
                                     paste0('M', `Age Group`)),
                race_n = 4
              )) |>
  select(all_of(c(
    'Name',
    'Age Group',
    'Swim Points',
    'Bike Points',
    'Run Points',
    'Total Points',
    'race_n'
  )))

races <- races_raw |>
  group_by(Name) |>
  summarise(
    ag = unique(`Age Group`),
    swim_points = sum(`Swim Points`),
    bike_points = sum(`Bike Points`),
    run_points = sum(`Run Points`),
    total_points = sum(`Total Points`),
    n_races = n()
  )

races <- as.data.frame(races)

races <- lapply(split(races, races$ag), function(d){
  d <- d |>
    arrange(desc(swim_points)) |>
    mutate(swim_ranking_ag = seq(1, nrow(d))) |>
    arrange(desc(bike_points)) |>
    mutate(bike_ranking_ag = seq(1, nrow(d))) |>
    arrange(desc(run_points)) |>
    mutate(run_ranking_ag = seq(1, nrow(d))) |>
    arrange(desc(total_points)) |>
    mutate(ranking_ag = seq(1, nrow(d)))
  
  d
}) |>
  dplyr::bind_rows() |>
  arrange(desc(swim_points)) |>
  mutate(swim_ranking = seq(1, nrow(races))) |>
  arrange(desc(bike_points)) |>
  mutate(bike_ranking = seq(1, nrow(races))) |>
  arrange(desc(run_points)) |>
  mutate(run_ranking = seq(1, nrow(races))) |>
  arrange(desc(total_points)) |>
  mutate(ranking = seq(1, nrow(races)))

kableExtra::kable(races |>
                    filter(ranking_ag == 1) |>
                    select(all_of(c(
                      'Name',
                      'ag',
                      'ranking_ag',
                      'ranking'
                    ))) |>
                    rename(
                      'Age Group' = 'ag',
                      'Age Group Ranking' = 'ranking_ag',
                      'Overall Ranking' = 'ranking'
                    ))

```

Since this is a series, the people who race at least three times are more likely to win overall—it’s a numbers game. In my case, I was the only M40–49 athlete to race in three or more events. That said, I like to compare my placement across each race to see how close I am to the top of my age grooup.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
a <- races_raw |>
  filter(`Age Group` == 'M40-49')

a <- lapply(split(a, a$race_n), function(d){
  d <- d |>
    arrange(desc(`Swim Points`)) |>
    mutate(swim_ranking_ag = seq(1, nrow(d))) |>
    arrange(desc(`Bike Points`)) |>
    mutate(bike_ranking_ag = seq(1, nrow(d))) |>
    arrange(desc(`Run Points`)) |>
    mutate(run_ranking_ag = seq(1, nrow(d))) |>
    arrange(desc(`Total Points`)) |>
    mutate(ranking_ag = seq(1, nrow(d)))
  d
}) |>
  dplyr::bind_rows() |>
  filter(Name == 'Adrian Joseph')|>
  select(all_of(c(
    'Name',
    'race_n',
    'swim_ranking_ag',
    'bike_ranking_ag',
    'run_ranking_ag',
    'ranking_ag'
  ))) |>
  rename(
    'Race [#]' = 'race_n',
    'Swim Ranking' = 'swim_ranking_ag',
    'Bike Ranking' = 'bike_ranking_ag',
    'Run Ranking' = 'run_ranking_ag',
    'Final Ranking' = 'ranking_ag'
  )

kableExtra::kable(a)

```

As expected, my bike suffers on the first race because I started a couple of minutes late, and my swim on Race 3 was not great. Regardless, I was always up there, so at least I can tell myself that I did not win the Series only because I was the only one doing three races. I was always up there.


## Races comparison

### Swim

Let’s start with the swim. One change in Race 4: it was held in a 25-meter pool instead of a 50-meter one, which usually leads to faster times.

Here are the summary metrics:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(readr)
library(dplyr)
library(ggplot2)
library(FITfileR)

get_record <- function(file_name){
  
  df <- FITfileR::readFitFile(file.path('data', file_name))
  df <- FITfileR::getMessagesByType(df, 'record') |>
    filter(distance > 0) |>
    mutate(race_n =  gsub('_run.fit', '', file_name),
           Power = ifelse(distance > 50 & Power < 50, mean(Power, na.rm = TRUE), Power),
           pace = round(c(0, 1000/(diff(distance)*60)), 2))
  df <- df |>
    mutate(elapsed_time = seq(0, nrow(df) - 1))
  
  return(df)
}

join_records <- function(all_records){
  all_colnames <- lapply(all_records, function(d){colnames(d)})
  sameCols <- Reduce(intersect, all_colnames)
  
  all_records <- lapply(all_records, function(d){
    d <- d|>
      select(all_of(sameCols))
    d
  }) |>
    dplyr::bind_rows() |>
    mutate(race_n = case_when(
      race_n == '2025-02-22' ~ 'Race 1',
      race_n == '2025-04-12' ~ 'Race 3',
      .default = 'Race 4',
    ))
  
  return(all_records)
}

all_records <- lapply(c('2025-02-22_run.fit',
                        '2025-04-12_run.fit',
                        '2025-05-04_run.fit'), function(d){get_record(d)})

all_records <- join_records(all_records)


summary_run_records <- all_records |>
  group_by(race_n) |>
  summarize(
    mean_power = round(mean(Power), 0),
    mean_heart_rate = round(mean(heart_rate), 0),
    mean_ground_time = round(mean(`Ground Time`), 1),
    mean_cadence = round(mean(cadence), 0),
    split_pace_perc = round(-100 * (mean(pace[seq(1, floor(n()/2))]) - mean(pace[seq(floor(n()/2)+1, n())])) / mean(pace[seq(1, floor(n()/2))]), 2),
    split_cadence_perc = round(-100 * (mean(cadence[seq(1, floor(n()/2))]) - mean(cadence[seq(floor(n()/2)+1, n())])) / mean(cadence[seq(1, floor(n()/2))]), 2),
    split_power_perc = round(-100 * (mean(Power[seq(1, floor(n()/2))]) - mean(Power[seq(floor(n()/2)+1, n())])) / mean(Power[seq(1, floor(n()/2))]), 2),
    split_ground_perc = round(-100 * (mean(`Ground Time`[seq(1, floor(n()/2))]) - mean(`Ground Time`[seq(floor(n()/2)+1, n())])) / mean(`Ground Time`[seq(1, floor(n()/2))]), 2),
    distance = round(max(distance)/1000, 2),
    elapsed_time = round(max(elapsed_time)/60, 2),
    pace = round(elapsed_time/distance, 2),
    pace_char = sprintf("%d:%02d", floor(pace), round((pace - floor(pace)) * 60))
  ) |>
  select(all_of(c(
    'distance',
    'pace_char',
    'split_pace_perc',
    'mean_power',
    'split_power_perc',
    'mean_cadence',
    'split_cadence_perc',
    'mean_ground_time',
    'split_ground_perc',
    'mean_heart_rate'
  ))) |>
  rename(
    'Distance [km]' = 'distance',
    'Pace [min/km]' = 'pace_char',
    'Power [W]' = 'mean_power',
    'Heart Rate [bpm]' = 'mean_heart_rate',
    'Ground Time [ms]' = 'mean_ground_time',
    'Cadence [spm]' = 'mean_cadence',
    'Pace Variation [%]' = 'split_pace_perc',
    'Cadence Variation [%]' = 'split_cadence_perc',
    'Power Variation [%]' = 'split_power_perc',
    'Ground Time Variation [%]' = 'split_ground_perc',
  )


get_plot <- function(df, y_data){
  p <- ggplot(df) +
    aes(x = distance, y = .data[[y_data]], colour = race_n) +
    geom_line() +
    scale_color_hue(direction = 1) +
    theme_minimal() +
    ylab(y_data)
  
  return(p)
}

get_swim_data <- function(file_path, length_factor = 1){
  df <- read_csv(file.path("data", file_path),
                 show_col_types = FALSE) |>
    filter(!is.na(Distance)) |>
    mutate(
      race_n = case_when(
      gsub('_swim.csv', '', file_path) == '2025-02-22' ~ 'Race 1',
      gsub('_swim.csv', '', file_path) == '2025-04-12' ~ 'Race 3',
      .default = 'Race 4'
    ),
    Distance = Distance * length_factor,
           'Cumulative Time' = as.numeric(`Cumulative Time`/60),
           Time = as.numeric(Time/60),
           'Avg Pace' = as.numeric(`Avg Pace`/(60 * length_factor)),
           cum_distance = cumsum(Distance),
           strokes_per_minute = round(2 * 60 * `Total Strokes` / Time)) |>
    select(all_of(c(
      "Distance", 'cum_distance', "Time", "Cumulative Time", "Avg Pace", 
      "Total Strokes", 'strokes_per_minute', "race_n"   
    )))
  
  return(df)
}

all_swim_records_original <- get_swim_data('2025-02-22_swim.csv', 2) |>
  dplyr::bind_rows(get_swim_data('2025-04-12_swim.csv', 1)) |>
  dplyr::bind_rows(get_swim_data('2025-05-04_swim.csv', 1))



all_swim_records_normalized <-  all_swim_records_original |>
  filter(race_n != 'Race 4') |>
  dplyr::bind_rows(all_swim_records_original |>
                     filter(race_n == 'Race 4') |>
                     mutate(group_row  = c(rep(seq(1, 17), each = 2), 18)) |>
                     group_by(group_row) |>
                     summarize(`Total Strokes` = sum(`Total Strokes`),
                               Time = sum(Time),
                               Distance = unique(Distance),
                               cum_distance = max(cum_distance),
                               `Cumulative Time` = max(`Cumulative Time`),
                               `Avg Pace` = round(mean(`Avg Pace`)),
                               strokes_per_minute = mean(strokes_per_minute),
                               race_n = unique(race_n))) |>
  select(-c('group_row'))

summary_swim_records <- all_swim_records_normalized |>
  group_by(race_n) |>
  summarize(
    'Distance [m]' = max(cum_distance),
    'Time [sec/50m]' = round(mean(Time)),
    'Time Variation [%]' = round(-100 * (mean(Time[seq(1, floor(n()/2))]) - mean(Time[seq(floor(n()/2)+1, n())])) / mean(Time[seq(1, floor(n()/2))]), 2),
    'Strokes Rate [spm]' = round(mean(strokes_per_minute)),
    'Strokes Rate Variation [%]' = round((100 * (mean(`Total Strokes`[seq(1, floor(n()/2))]) - mean(`Total Strokes`[seq(floor(n()/2)+1, n())])) / mean(`Total Strokes`[seq(1, floor(n()/2))])),2)
  ) |>
  rename('Race [#]' = 'race_n')
  

official_records <- data.frame(
  race_n = c('Race 1', 'Race 2', 'Race 4'),
  swim_distance = c(825, 775, 887),
  bike_distance = c(9, 10.6, 10.6),
  run_distance = c(15*0.2, 16.5*0.2, 17*0.2),
  swim_points = c(330, 310, 355),
  bike_points = c(450, 530, 530),
  run_points = c(375, 413, 425),
  total_points = c(1150, 1253, 1310)
) |>
  mutate(
    swim_pace = round(-100*15/swim_distance, 2),
    swim_pace_char = sprintf("%d:%02d", floor(swim_pace), round((swim_pace - floor(swim_pace)) * 60)),
    bike_speed = round(60*bike_distance/15, 2),
    run_pace = round(15/run_distance, 2),
    run_pace_char = sprintf("%d:%02d", floor(run_pace), round((run_pace - floor(run_pace)) * 60))
  ) |>
  select(all_of(c(
    'race_n',
    'swim_distance',
    'swim_pace_char',
    'swim_points',
    'bike_distance',
    'bike_speed',
    'bike_points',
    'run_distance',
    'run_pace_char',
    'run_points',
    'total_points'
  )))

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
kable(summary_swim_records)
```

There wasn't a huge difference in total distance, but Race 4 was the fastest—and, more importantly, the most consistent. I calculated the percentage change between the first and second halves of the swim. Ideally, I want an even or negative split.

* Race 1: 7% slower in the second half.
* Race 3: 13% slower (!) in the ssecond half.
* Race 4: Less than 1% slower in the second half.

Stroke rate followed the same trend. All in all, Race 4 was way more even. I also focused on minimizing leg movement—something I’ll definitely keep working on.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
ggplot(all_swim_records_normalized) +
  aes(x = cum_distance, y = Time, colour = race_n) +
  geom_step() +
  scale_color_hue(direction = 1) +
  theme_minimal() +
  ylab('Time [sec/50m]') +
  xlab("Distance [m]")

```

Race 4 started off faster, but then I was able to hold the pace better than in the other races. I remember thinking a lot about trying to limit legs movement. I think that is something I should continue working on.

### Bike

Not much to report here. I didn’t have sensors connected to my watch, so all I have are the official distances:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
kable(official_records |>
        select(all_of(c(
          'race_n',
          'bike_distance'
        ))) |>
        rename(
          'Race [#]' = 'race_n',
          'Distane [km]' = 'bike_distance'
        )
      )
```

Race 1 was a bit of a mess—I didn’t realize the race had started and lost a couple of minutes. The good news: the bike effort felt easier each time.

### Run

Now for the run. Here's the data:

```{r, echo=FALSE, message=FALSE, warning=FALSE}
kable(summary_run_records)
```

I’m pretty happy with the progression. While I’m still not quite at the speed I’d like, things are trending in the right direction. Power is up, cadence is up, and I managed to keep an even or negative split.

Race 1 was a bit of a head-scratcher—I couldn’t raise my heart rate or generate much speed. I suspect I went too hard on the bike trying to make up for the late start.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(gridExtra)
gpo <- get_plot(all_records, 'Power')
gh <- get_plot(all_records, 'heart_rate')
gc <- get_plot(all_records, 'cadence')
gpa <- get_plot(all_records, 'pace')
grid.arrange(gpo, gh, gc, gpa, ncol=2, nrow =2)
```

### Official results

The distances above are from my Garmin and Stryd power meter, which are great for comparisons—but not always accurate compared to the official results. For example, running in the outside lane to pass others adds distance that isn’t captured in the official numbers.

Here’s the official breakdown:

```{r, echo=FALSE, message=FALSE, warning=FALSE}
kable(official_records |>
        select(all_of(c(
          'race_n',
          'swim_distance',
          'swim_points',
          'bike_distance',
          'bike_points',
          'run_distance',
          'run_points',
          'total_points'
        ))) |>
        rename(
          'Race [#]' = 'race_n',
          'Swim [m]' = 'swim_distance',
          'Swim Points' = 'swim_points',
          'Bike [km]' = 'bike_distance',
          'Bike Points' = 'bike_points',
          'Run [km]' = 'run_distance',
          'Run Points' = 'run_points',
          'Total Points' = 'total_points'
        ))
```

# Final Thoughts

All in all, I’m happy with how things went. There’s clear improvement across the board, and more importantly, I felt stronger each time out. That’s a good sign as I head into the outdoor season. Let’s see what the next phase brings!


```{r, echo=FALSE, warning=FALSE, message=FALSE}
race_date <- "2025-05-04"

source('../../inst/aux_functions.R')

DT::datatable(get_summary_data(arrow::read_parquet('https://storage.googleapis.com/blogs_josa/sport/parquets/main_dataset.parquet') |>
  filter(as.character(event_date) == race_date)),
              rownames = FALSE,
              filter = 'top',
              selection = 'single',
              escape = FALSE,
              options = list(
                paging =TRUE,
                pageLength =  10
              ))
```



::: {layout-ncol=4}

:::

