---
title: "Indoor Triathlon Provincial Championship Series - Race 4"
date: "2025-04-05"
author: "Adrian Joseph"
categories: [race report, triathlon, indoor]
format: html
lightbox:
  match: auto
  effect: fade
  desc-position: right
  loop: false
---

![](img/00.png)

# Overview

This was the third race in the Ontario Indoor Triathlon Championship series. I talked about the format in general and previous races [here](../2025-02-22_INDOOR_TRIATHLON_SERIES_RACE_1/index.qmd) and [here](../2025-04-12_INDOOR_TRIATHLON_SERIES_RACE_3/index.qmd).

In summary, in this series you get points for how far you swim, bike, and run in 15 minutes. The further you go, the more points you get. The series is made by 4 races, but only the top 3 results for each competitors count towards the final total. Whoever gets more point at then end of the series wins the championship and get the trophy. Age Grouper can still hope to win bragging rights if they pace at the top of their 10years group, but they only get a digital certificate.


Going into this event I had 2 objective:

* Maintain the age group leadership.
* Do better (or at least not worse) that the previous event.

I had no aspiration for the overall title because there is no way at at 40+ years of age I can compete with 20years old in this type of events.

So, how did it go?

## Races comparison

### Swim

Let's start from the swim. Keep in m ind that in race 4 there was a change: we swam in a 25 meters pool rather a 50 meters pool, which usually makes it for a faster swim.

First of all, let's have a look at some overall metrics.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(readr)
library(dplyr)
library(ggplot2)
library(FITfileR)
library(kableExtra)

get_record <- function(file_name){
  
  df <- FITfileR::readFitFile(file.path('data', file_name))
  df <- FITfileR::getMessagesByType(df, 'record') |>
    filter(distance > 0) |>
    mutate(race_n =  gsub('_run.fit', '', file_name),
           Power = ifelse(distance > 50 & Power < 50, mean(Power, na.rm = TRUE), Power),
           pace = round(c(0, 1000/(diff(distance)*60)), 2))
  df <- df |>
    mutate(elapsed_time = seq(0, nrow(df) - 1))
  
  return(df)
}

join_records <- function(all_records){
  all_colnames <- lapply(all_records, function(d){colnames(d)})
  sameCols <- Reduce(intersect, all_colnames)
  
  all_records <- lapply(all_records, function(d){
    d <- d|>
      select(all_of(sameCols))
    d
  }) |>
    dplyr::bind_rows() |>
    mutate(race_n = case_when(
      race_n == '2025-02-22' ~ 'Race 1',
      race_n == '2025-04-12' ~ 'Race 3',
      .default = 'Race 4',
    ))
  
  return(all_records)
}

all_records <- lapply(c('2025-02-22_run.fit',
                        '2025-04-12_run.fit',
                        '2025-05-04_run.fit'), function(d){get_record(d)})

all_records <- join_records(all_records)


summary_run_records <- all_records |>
  group_by(race_n) |>
  summarize(
    mean_power = round(mean(Power), 0),
    mean_heart_rate = round(mean(heart_rate), 0),
    mean_ground_time = round(mean(`Ground Time`), 1),
    mean_cadence = round(mean(cadence), 0),
    split_pace_perc = round(-100 * (mean(pace[seq(1, floor(n()/2))]) - mean(pace[seq(floor(n()/2)+1, n())])) / mean(pace[seq(1, floor(n()/2))]), 2),
    split_cadence_perc = round(-100 * (mean(cadence[seq(1, floor(n()/2))]) - mean(cadence[seq(floor(n()/2)+1, n())])) / mean(cadence[seq(1, floor(n()/2))]), 2),
    split_power_perc = round(-100 * (mean(Power[seq(1, floor(n()/2))]) - mean(Power[seq(floor(n()/2)+1, n())])) / mean(Power[seq(1, floor(n()/2))]), 2),
    split_ground_perc = round(-100 * (mean(`Ground Time`[seq(1, floor(n()/2))]) - mean(`Ground Time`[seq(floor(n()/2)+1, n())])) / mean(`Ground Time`[seq(1, floor(n()/2))]), 2),
    distance = round(max(distance)/1000, 2),
    elapsed_time = round(max(elapsed_time)/60, 2),
    pace = round(elapsed_time/distance, 2),
    pace_char = sprintf("%d:%02d", floor(pace), round((pace - floor(pace)) * 60))
  ) |>
  select(all_of(c(
    'distance',
    'pace_char',
    'split_pace_perc',
    'mean_power',
    'split_power_perc',
    'mean_cadence',
    'split_cadence_perc',
    'mean_ground_time',
    'split_ground_perc',
    'mean_heart_rate'
  ))) |>
  rename(
    'Distance [km]' = 'distance',
    'Pace [min/km]' = 'pace_char',
    'Power [W]' = 'mean_power',
    'Heart Rate [bpm]' = 'mean_heart_rate',
    'Ground Time [ms]' = 'mean_ground_time',
    'Cadence [spm]' = 'mean_cadence',
    'Pace Variation [%]' = 'split_pace_perc',
    'Cadence Variation [%]' = 'split_cadence_perc',
    'Power Variation [%]' = 'split_power_perc',
    'Ground Time Variation [%]' = 'split_ground_perc',
  )


get_plot <- function(df, y_data){
  p <- ggplot(df) +
    aes(x = distance, y = .data[[y_data]], colour = race_n) +
    geom_line() +
    scale_color_hue(direction = 1) +
    theme_minimal() +
    ylab(y_data)
  
  return(p)
}

get_swim_data <- function(file_path, length_factor = 1){
  df <- read_csv(file.path("data", file_path),
                 show_col_types = FALSE) |>
    filter(!is.na(Distance)) |>
    mutate(
      race_n = case_when(
      gsub('_swim.csv', '', file_path) == '2025-02-22' ~ 'Race 1',
      gsub('_swim.csv', '', file_path) == '2025-04-12' ~ 'Race 3',
      .default = 'Race 4'
    ),
    Distance = Distance * length_factor,
           'Cumulative Time' = as.numeric(`Cumulative Time`/60),
           Time = as.numeric(Time/60),
           'Avg Pace' = as.numeric(`Avg Pace`/(60 * length_factor)),
           cum_distance = cumsum(Distance),
           strokes_per_minute = round(2 * 60 * `Total Strokes` / Time)) |>
    select(all_of(c(
      "Distance", 'cum_distance', "Time", "Cumulative Time", "Avg Pace", 
      "Total Strokes", 'strokes_per_minute', "race_n"   
    )))
  
  return(df)
}

all_swim_records_original <- get_swim_data('2025-02-22_swim.csv', 2) |>
  dplyr::bind_rows(get_swim_data('2025-04-12_swim.csv', 1)) |>
  dplyr::bind_rows(get_swim_data('2025-05-04_swim.csv', 1))



all_swim_records_normalized <-  all_swim_records_original |>
  filter(race_n != 'Race 4') |>
  dplyr::bind_rows(all_swim_records_original |>
                     filter(race_n == 'Race 4') |>
                     mutate(group_row  = c(rep(seq(1, 17), each = 2), 18)) |>
                     group_by(group_row) |>
                     summarize(`Total Strokes` = sum(`Total Strokes`),
                               Time = sum(Time),
                               Distance = unique(Distance),
                               cum_distance = max(cum_distance),
                               `Cumulative Time` = max(`Cumulative Time`),
                               `Avg Pace` = round(mean(`Avg Pace`)),
                               strokes_per_minute = mean(strokes_per_minute),
                               race_n = unique(race_n))) |>
  select(-c('group_row'))

summary_swim_records <- all_swim_records_normalized |>
  group_by(race_n) |>
  summarize(
    'Distance [m]' = max(cum_distance),
    'Time [sec/50m]' = round(mean(Time)),
    'Time Variation [%]' = round(-100 * (mean(Time[seq(1, floor(n()/2))]) - mean(Time[seq(floor(n()/2)+1, n())])) / mean(Time[seq(1, floor(n()/2))]), 2),
    'Strokes Rate [spm]' = round(mean(strokes_per_minute)),
    'Strokes Rate Variation [%]' = round((100 * (mean(`Total Strokes`[seq(1, floor(n()/2))]) - mean(`Total Strokes`[seq(floor(n()/2)+1, n())])) / mean(`Total Strokes`[seq(1, floor(n()/2))])),2)
  ) |>
  rename('Race [#]' = 'race_n')
  

official_records <- data.frame(
  race_n = c('Race 1', 'Race 2', 'Race 4'),
  swim_distance = c(825, 775, 887),
  bike_distance = c(9, 10.6, 10.6),
  run_distance = c(15*0.2, 16.5*0.2, 17*0.2),
  swim_points = c(330, 310, 355),
  bike_points = c(450, 530, 530),
  run_points = c(375, 413, 425),
  total_points = c(1150, 1253, 1310)
) |>
  mutate(
    swim_pace = round(-100*15/swim_distance, 2),
    swim_pace_char = sprintf("%d:%02d", floor(swim_pace), round((swim_pace - floor(swim_pace)) * 60)),
    bike_speed = round(60*bike_distance/15, 2),
    run_pace = round(15/run_distance, 2),
    run_pace_char = sprintf("%d:%02d", floor(run_pace), round((run_pace - floor(run_pace)) * 60))
  ) |>
  select(all_of(c(
    'race_n',
    'swim_distance',
    'swim_pace_char',
    'swim_points',
    'bike_distance',
    'bike_speed',
    'bike_points',
    'run_distance',
    'run_pace_char',
    'run_points',
    'total_points'
  )))

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
kable(summary_swim_records)
```

There is not a massive difference between the overall distance, but at least I closed with the faster swim. What I like is that this effort was much more consistent. For each race I calculated the variation in percentage between the first 7.5minutes and the last 7.5 minutes. A perfectly even effort would have a variation of 0%. An effort with a negative split will have a negative variation. What I always aim for is an even or negative split.

In the first race my time for every 50 meters was about 7% slower in the second half than in the first half. In Race 3 even worse: 13% slower. In Race 4 much better: under 1% slower. Similar results for the stroke rate variation. This last race was much more consistent.

Below are the actual times it took me for every 50 meters in each of the 3 races.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
ggplot(all_swim_records_normalized) +
  aes(x = cum_distance, y = Time, colour = race_n) +
  geom_step() +
  scale_color_hue(direction = 1) +
  theme_minimal() +
  ylab('Time [sec/50m]') +
  xlab("Distance [m]")

```

Race 4 started off faster, but then I was able to hold the pace better than in the other races. I remember thinking a lot about trying to limit legs movement. I think that is something I should continue working on.

### Bike

Here there is no much to see, since I had nothing connected to my watch that I could use to record metrics. I only have the official recorded distance:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
kable(official_records |>
        select(all_of(c(
          'race_n',
          'bike_distance'
        ))) |>
        rename(
          'Race [#]' = 'race_n',
          'Distane [km]' = 'bike_distance'
        )
      )
```

Of course the first effort was affected by me not realizing the race started, so I lost a couple of minutes or so. Overall pretty consistent effort between races. The good thing is that if felt easier every time.

### Run

Here is the table of the main metrics.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
kable(summary_run_records)
```

I am pretty happy with the run. Maybe not with the absolute performance, that is still a bit slower than I would like, but the trajectory is good. I managed to be consistently faster, with increased power output, increased cadence, and even or negative splits. If anything, the first race was a bit of a surprise. I could not keep the herat rate up and I could not produce speed. My guess is that I overcooked the bike to compensate for the late start, and I was not able to produce a decent effort on the run.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(gridExtra)
gpo <- get_plot(all_records, 'Power')
gh <- get_plot(all_records, 'heart_rate')
gc <- get_plot(all_records, 'cadence')
gpa <- get_plot(all_records, 'pace')
grid.arrange(gpo, gh, gc, gpa, ncol=2, nrow =2)
```

### Official results

The distances I used above are the ones recorded by my Garmin and the Stryd power meter. They are good to compare performances at a fairly high level as I did so far, but they are do not match the official distances. Even if they were 100% accurate, the fact that I have to go on the outside lane of the track to overtake during the run will add some extra distance that is not recorded in the official measurements.

So, let's have a look at the official performance.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
kable(official_records |>
        select(all_of(c(
          'race_n',
          'swim_distance',
          'swim_points',
          'bike_distance',
          'bike_points',
          'run_distance',
          'run_points',
          'total_points'
        ))) |>
        rename(
          'Race [#]' = 'race_n',
          'Swim [m]' = 'swim_distance',
          'Swim Points' = 'swim_points',
          'Bike [km]' = 'bike_distance',
          'Bike Points' = 'bike_points',
          'Run [km]' = 'run_distance',
          'Run Points' = 'run_points',
          'Total Points' = 'total_points'
        ))
```

```{r, echo=FALSE}
library(DT)
if(file.exists(file.path('data.json'))){
  tmp <- jsonlite::fromJSON(file.path('data.json'))
    breakdown <- tmp$breakdown
    tmp$breakdown <- NULL
    tmp <- as.data.frame(tmp) %>%
      dplyr::bind_cols(breakdown)

    details <- unlist(tmp$details)
    if(!is.null(details)){
      details <- paste0('<a href="',
                        details, '">Link to activity file</a>')
      details_names <- paste0('details_', seq(1, length(details)))
    } else {
      details_names <- NULL
    }

    tmp$details <- NULL


    df <- as.data.frame(t(tmp)) %>%
      dplyr::bind_rows(data.frame(V1 = details))

    df <- data.frame('  ' = c(colnames(tmp), details_names),
                     ' ' = df,
                     check.names = FALSE)
    colnames(df) <- NULL


    datatable(df,
              rownames = FALSE,
              selection = 'single',
              escape = FALSE,
              options = list(
                paging =TRUE,
                pageLength =  20
              ))
}
```





::: {layout-ncol=4}
![](img_modal/00.png){ width="100" group="hi" }

![](img_modal/01.png){ width="100" group="hi" }

![](img_modal/02.png){ width="100" group="hi" }
:::

